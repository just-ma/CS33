A.
 &A[i][j][k] = x_A + L(T*S*i + T*j + k)

 k increments first, followed by j, and finally i. Thus, j increments after T elements (the number of k's). i increments after T*S elements (an array of j and k). Each increment must be divisible by L bits. The origin [0][0][0] is at x_A.
 
B.
 R = 56, S = 5, T = 13
 
 1 store_ele:
 2      leaq (%rsi,%rsi,2), %rax    // rax = 2j + j = 3j
 3      leaq (%rsi,%rax,4), %rax    // rax = 4*3j + j = 13j
 4      movq %rdi, %rsi             // rsi = i
 5      salq $6, %rsi               // rsi = i << 6 = 64i
 6      addq %rsi, %rdi             // rdi = i + 64i = 65i
 7      addq %rax, %rdi             // rdi = 65i + 13j
 8      addq %rdi, %rdx             // rdx = 65i + 13j + k
 9      movq A(,%rdx,8), %rax       // rax = A + 8(65i + 13j + k)
 10     movl %rax, (%rcx)           // rcx contains equation above
 11     movl $3640, %eax            // means 65*R = 3640
 12     ret
 
 3640/65 = 56 = R
 65/13 = 5 = S
 13 = T
