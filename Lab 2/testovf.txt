Justin Ma
604805167

CASE 1:
gcc -S -fno-asynchronous-unwind-tables -O2 testovf.c
testovf:
        xorl    %eax, %eax
        ret

EXPLANATION:
The instruction xorl on the same registers will result in 0. Thus, the machine code will return 0 no matter what the input is. This makes mathematical sense since when adding 9223372036854775807 to any number should result in a number less than the original. Level 2 optimization was enough to realize this, and simply return 0 every time. 


CASE 2:
gcc -S -fno-asynchronous-unwind-tables -O2 -fwrapv testovf.c
testovf:
        movabsq $9223372036854775807, %rax
        addq    %rdi, %rax
        cmpq    %rdi, %rax
        setl    %al
        ret

EXPLANATION:
When overflow wraps around, standard math is no longer valid. Adding 9223372036854775807 to a number can now cause the answer to be less than the original since higher order bits will be discarded when overflow occurs. In this machine code, the instructions simply add the two numbers together and compares them, since overflow is inherent in machine operations.


CASE 3:
gcc -S -fno-asynchronous-unwind-tables -O2 -fsanitize=undefined testovf.c
testovf:
        pushq   %rbp
        pushq   %rbx
        movabsq $9223372036854775807, %rdx
        movq    %rdi, %rbp
        movq    %rdi, %rbx
        subq    $8, %rsp
        addq    %rdx, %rbp
        jo      .L6
.L2:
        cmpq    %rbx, %rbp
        setl    %al
        addq    $8, %rsp
        popq    %rbx
        popq    %rbp
        ret
.L6:
        movq    %rdi, %rsi
        movl    $.Lubsan_data0, %edi
        call    __ubsan_handle_add_overflow
        jmp     .L2

EXPLANATION:
fsanitize=undefined checks for overflow and will output an error message if it occurs. The conditional jump instruction checks for overflow. If it occurred, instructions will jump to .L6, while if it did not, regular comparison will ensue.  
