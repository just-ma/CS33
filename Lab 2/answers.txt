Justin Ma
604805167

1.
The error occurred in the following line:

544dfc	  4a 8d 04 a5 02 00 00 00   lea 0x2(,%r12,4),%rax	rax=7fffffff73ab3b42 

Here, %r12=0xdfffffffdceaced0, and the lea instruction multiplies this value by 4, then moves it into %rax. However, 0xdfffffffdceaced0 multiplied by 4 causes overflow producing an incorrect result.


2.
I opened data.c and searched for most-negative-fixnum using the C-s command. There, I found that “most-negative-fixnum” is equal to Vmost_negative_fixnum which is equal to MOST_NEGATIVE_FIXNUM. 
This value is defined in lisp.h as (-1 - MOST_POSITIVE_FIXNUM). MOST_POSITIVE_FIXNUM is defined as (EMACS_INT_MAX >> INTTYPEBITS). 
EMACS_INT_MAX is defined as INT_MAX. In binary, INT_MAX has a 0 as the first bit and 1 for the rest of the 63 bits (011…11). 
INTTYPEBITS is defined as (GCTYPEBITS - 1) and GCTYPEBITS is defined as 3; thus, INTTYPEBITS is 2. 
EMACS_INT_MAX shifted to the right by 2 is 00011…11. To negate this, invert all bits and add 1, which equals 11100…001. This minus one equals MOST_NEGATIVE_FIXNUM, and the final answer comes out to be 11100…00.

This converts to -2305843009213693952 in decimal.


3.
In data.c, I searched for most-positive-fixnum using the C-s command. There, I found that “most-positive-fixnum” is equal to Vmost_positive_fixnum which is equal to MOST_POSITIVE_FIXNUM. 
This value is defined in lisp.h as (EMACS_INT_MAX >> INTTYPEBITS). From question 2, this was determined to be INT_MAX which can be represented as 0x7fffffffffffffff in hexadecimal. This number multiplied by itself produces 0x3fffffffffffffff0000000000000001. Only the bottom 64 bits are taken due to overflow, which produces 0x0000000000000001 or simply 0x1. 

Since most-positive-fixnum is multiplied by itself 4 times, it is the same as multiplying 0x1 by 0x1 which is 0x1.


4.
Using the -fwrapv flag, overflow is allowed and the answer wraps back around. Thus, emacs’ job is simplified and does not have to check for overflow anymore. The result from the program will agree with the mathematical results when overflow does not occur and disagree when overflow does occur. This is because wrapping around from addition will cause the resulting number to be less than the original. 


5. 
Running the following command:

~eggert/bin64/bin/emacs-25.2 -Q -batch -eval '(print (format-time-string "%Y-%m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) “0")))' 

gives the following error:

*** Error in `/u/cs/fac/eggert/bin64/bin/emacs-25.2': double free or corruption (!prev): 0x00000000024d0510 ***

Double free means something was a free function was called twice, and corruption means something tried to go beyond allocated memory. So, I looked for these things when I backtraced. 
The backtrace command produced 30 functions from the stack with the first one called at the very bottom. I noticed just before the abort function were two consecutive tzfree functions. The second one was followed by an _int_free function which was followed by __libc_message signaling an error. 
I disassembled _int_free which had address 0x00007ffff16a6619 and went through the lines of code until I found the line corresponding to the error, which is stated below:

0x00007ffff16a6619 <+1273>:    jmpq   0x7ffff16a6562 <_int_free+1090>
